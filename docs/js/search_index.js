var search_data = {"index":{"searchIndex":["rangops","set","utils","&()","complement()","contains?()","difference()","intersection()","is_contained_by?()","overlaps?()","proper_subset?()","proper_superset?()","sort_by_end()","subset?()","superset?()","union()","|()","readme"],"longSearchIndex":["rangops","rangops::set","rangops::utils","rangops::set#&()","rangops::set#complement()","rangops::set#contains?()","rangops::set#difference()","rangops::set#intersection()","rangops::set#is_contained_by?()","rangops::set#overlaps?()","rangops::set#proper_subset?()","rangops::set#proper_superset?()","rangops::utils::sort_by_end()","rangops::set#subset?()","rangops::set#superset?()","rangops::set#union()","rangops::set#|()",""],"info":[["Rangops","","Rangops.html","",""],["Rangops::Set","","Rangops/Set.html","","<p>Module defining basic set operations that can be performed\non ranges.\n<p>union\n<p>intersection\n"],["Rangops::Utils","","Rangops/Utils.html","",""],["&","Rangops::Set","Rangops/Set.html#method-i-26","(other)",""],["complement","Rangops::Set","Rangops/Set.html#method-i-complement","(other)","<p>Relative complement of 2 ranges. Returns a range covering\nelements from\n<code>other</code> that are not covered by ...\n"],["contains?","Rangops::Set","Rangops/Set.html#method-i-contains-3F","(other)",""],["difference","Rangops::Set","Rangops/Set.html#method-i-difference","(other)","<p>Symmetric difference of 2 ranges. Returns ranges covering\nelements of both\noperands, excluding elements ...\n"],["intersection","Rangops::Set","Rangops/Set.html#method-i-intersection","(other)","<p>Intersection of 2 ranges. Returns a range covering elements\ncommon to both\nranges. Returns <code>nil</code> if ranges ...\n"],["is_contained_by?","Rangops::Set","Rangops/Set.html#method-i-is_contained_by-3F","(other)",""],["overlaps?","Rangops::Set","Rangops/Set.html#method-i-overlaps-3F","(other)","<p>Taken from ActiveSupport - it&#39;s not in dependencies,\nand the method\nitself is too useful to be left ...\n"],["proper_subset?","Rangops::Set","Rangops/Set.html#method-i-proper_subset-3F","(other)","<p>Checks if <code>self</code> is proper subset of <code>other</code>,\ni.e. is\nsubset and has elements not present\nin <code>other</code>.\n"],["proper_superset?","Rangops::Set","Rangops/Set.html#method-i-proper_superset-3F","(other)","<p>Checks if <code>self</code> is proper superset of <code>other</code>,\ni.e.\nis superset and has elements not present\nin <code>other</code>.\n"],["sort_by_end","Rangops::Utils","Rangops/Utils.html#method-c-sort_by_end","(*ranges)","<p>Sort ranges by their end value, respecting possible exclusions.\n"],["subset?","Rangops::Set","Rangops/Set.html#method-i-subset-3F","(other)","<p>Checks if <code>self</code> is subset of <code>other</code>.\n"],["superset?","Rangops::Set","Rangops/Set.html#method-i-superset-3F","(other)","<p>Checks if <code>self</code> is superset of <code>other</code>.\n"],["union","Rangops::Set","Rangops/Set.html#method-i-union","(other)","<p>Union of 2 ranges. Returns a range covering sum of all elements\nbelonging\nto both ranges. Returns <code>nil</code> ...\n"],["|","Rangops::Set","Rangops/Set.html#method-i-7C","(other)",""],["README","","README_md.html","","<p>Rangops\n<p>Rangops is a simple Ruby extension library that aims to treat Ranges as\nsets.\n<p>It provides methods â€¦\n"]]}}